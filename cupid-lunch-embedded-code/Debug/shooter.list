
shooter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c54  08004c54  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000010  08004c88  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004c88  00006334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d757  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0b  00000000  00000000  00013793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000155a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c5  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016263  00000000  00000000  00016bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5b7  00000000  00000000  0002ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d622  00000000  00000000  0003b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8a11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  000c8a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cc088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c3c 	.word	0x08004c3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004c3c 	.word	0x08004c3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96a 	b.w	8000db0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	460c      	mov	r4, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d14e      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b00:	4694      	mov	ip, r2
 8000b02:	458c      	cmp	ip, r1
 8000b04:	4686      	mov	lr, r0
 8000b06:	fab2 f282 	clz	r2, r2
 8000b0a:	d962      	bls.n	8000bd2 <__udivmoddi4+0xde>
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	4091      	lsls	r1, r2
 8000b14:	fa20 f303 	lsr.w	r3, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b26:	fa1f f68c 	uxth.w	r6, ip
 8000b2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b32:	fb07 1114 	mls	r1, r7, r4, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb04 f106 	mul.w	r1, r4, r6
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b4a:	f080 8112 	bcs.w	8000d72 <__udivmoddi4+0x27e>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 810f 	bls.w	8000d72 <__udivmoddi4+0x27e>
 8000b54:	3c02      	subs	r4, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b62:	fb07 1110 	mls	r1, r7, r0, r1
 8000b66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6a:	fb00 f606 	mul.w	r6, r0, r6
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	d90a      	bls.n	8000b88 <__udivmoddi4+0x94>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b7a:	f080 80fc 	bcs.w	8000d76 <__udivmoddi4+0x282>
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	f240 80f9 	bls.w	8000d76 <__udivmoddi4+0x282>
 8000b84:	4463      	add	r3, ip
 8000b86:	3802      	subs	r0, #2
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b8e:	2100      	movs	r1, #0
 8000b90:	b11d      	cbz	r5, 8000b9a <__udivmoddi4+0xa6>
 8000b92:	40d3      	lsrs	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d905      	bls.n	8000bae <__udivmoddi4+0xba>
 8000ba2:	b10d      	cbz	r5, 8000ba8 <__udivmoddi4+0xb4>
 8000ba4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4608      	mov	r0, r1
 8000bac:	e7f5      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d146      	bne.n	8000c44 <__udivmoddi4+0x150>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xcc>
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	f0c0 80f0 	bcc.w	8000da0 <__udivmoddi4+0x2ac>
 8000bc0:	1a86      	subs	r6, r0, r2
 8000bc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d0e6      	beq.n	8000b9a <__udivmoddi4+0xa6>
 8000bcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd0:	e7e3      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 8090 	bne.w	8000cf8 <__udivmoddi4+0x204>
 8000bd8:	eba1 040c 	sub.w	r4, r1, ip
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa1f f78c 	uxth.w	r7, ip
 8000be4:	2101      	movs	r1, #1
 8000be6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb08 4416 	mls	r4, r8, r6, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb07 f006 	mul.w	r0, r7, r6
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x11c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x11a>
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000c0e:	4626      	mov	r6, r4
 8000c10:	1a1c      	subs	r4, r3, r0
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb00 f707 	mul.w	r7, r0, r7
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x148>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x146>
 8000c34:	429f      	cmp	r7, r3
 8000c36:	f200 80b0 	bhi.w	8000d9a <__udivmoddi4+0x2a6>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	1bdb      	subs	r3, r3, r7
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	e7a5      	b.n	8000b90 <__udivmoddi4+0x9c>
 8000c44:	f1c1 0620 	rsb	r6, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4e:	431f      	orrs	r7, r3
 8000c50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c54:	fa04 f301 	lsl.w	r3, r4, r1
 8000c58:	ea43 030c 	orr.w	r3, r3, ip
 8000c5c:	40f4      	lsrs	r4, r6
 8000c5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c62:	0c38      	lsrs	r0, r7, #16
 8000c64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c68:	fbb4 fef0 	udiv	lr, r4, r0
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fb00 441e 	mls	r4, r0, lr, r4
 8000c74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c78:	fb0e f90c 	mul.w	r9, lr, ip
 8000c7c:	45a1      	cmp	r9, r4
 8000c7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x1a6>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c8a:	f080 8084 	bcs.w	8000d96 <__udivmoddi4+0x2a2>
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	f240 8081 	bls.w	8000d96 <__udivmoddi4+0x2a2>
 8000c94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	eba4 0409 	sub.w	r4, r4, r9
 8000c9e:	fa1f f983 	uxth.w	r9, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x1d2>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	d267      	bcs.n	8000d8e <__udivmoddi4+0x29a>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0x29a>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cca:	fba0 9302 	umull	r9, r3, r0, r2
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	46ce      	mov	lr, r9
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	d351      	bcc.n	8000d7e <__udivmoddi4+0x28a>
 8000cda:	d04e      	beq.n	8000d7a <__udivmoddi4+0x286>
 8000cdc:	b155      	cbz	r5, 8000cf4 <__udivmoddi4+0x200>
 8000cde:	ebb8 030e 	subs.w	r3, r8, lr
 8000ce2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ce6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cea:	40cb      	lsrs	r3, r1
 8000cec:	431e      	orrs	r6, r3
 8000cee:	40cc      	lsrs	r4, r1
 8000cf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e750      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa24 f303 	lsr.w	r3, r4, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	430c      	orrs	r4, r1
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d20:	0c23      	lsrs	r3, r4, #16
 8000d22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d26:	fb00 f107 	mul.w	r1, r0, r7
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x24c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d36:	d22c      	bcs.n	8000d92 <__udivmoddi4+0x29e>
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d92a      	bls.n	8000d92 <__udivmoddi4+0x29e>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d48:	fb08 3311 	mls	r3, r8, r1, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb01 f307 	mul.w	r3, r1, r7
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x276>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d60:	d213      	bcs.n	8000d8a <__udivmoddi4+0x296>
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	d911      	bls.n	8000d8a <__udivmoddi4+0x296>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	1ae4      	subs	r4, r4, r3
 8000d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d70:	e739      	b.n	8000be6 <__udivmoddi4+0xf2>
 8000d72:	4604      	mov	r4, r0
 8000d74:	e6f0      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d76:	4608      	mov	r0, r1
 8000d78:	e706      	b.n	8000b88 <__udivmoddi4+0x94>
 8000d7a:	45c8      	cmp	r8, r9
 8000d7c:	d2ae      	bcs.n	8000cdc <__udivmoddi4+0x1e8>
 8000d7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d86:	3801      	subs	r0, #1
 8000d88:	e7a8      	b.n	8000cdc <__udivmoddi4+0x1e8>
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	e7ed      	b.n	8000d6a <__udivmoddi4+0x276>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	e799      	b.n	8000cc6 <__udivmoddi4+0x1d2>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e7d4      	b.n	8000d40 <__udivmoddi4+0x24c>
 8000d96:	46d6      	mov	lr, sl
 8000d98:	e77f      	b.n	8000c9a <__udivmoddi4+0x1a6>
 8000d9a:	4463      	add	r3, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e74d      	b.n	8000c3c <__udivmoddi4+0x148>
 8000da0:	4606      	mov	r6, r0
 8000da2:	4623      	mov	r3, r4
 8000da4:	4608      	mov	r0, r1
 8000da6:	e70f      	b.n	8000bc8 <__udivmoddi4+0xd4>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	e730      	b.n	8000c10 <__udivmoddi4+0x11c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	0000      	movs	r0, r0
	...

08000db8 <set_speed>:

Stepper* Motors[MAX_MOTOR];

uint8_t motor_cnt = 0;

void set_speed(double rpm, Stepper *stepper){
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0b06 	vstr	d0, [r7, #24]
 8000dc2:	6178      	str	r0, [r7, #20]
	if(rpm>0){
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dd0:	f7ff fe4e 	bl	8000a70 <__aeabi_dcmpgt>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <set_speed+0x3a>
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->dir_pin,GPIO_PIN_SET);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	6858      	ldr	r0, [r3, #4]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	891b      	ldrh	r3, [r3, #8]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	f001 f9ab 	bl	8002140 <HAL_GPIO_WritePin>
		stepper->dir = 1;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2201      	movs	r2, #1
 8000dee:	709a      	strb	r2, [r3, #2]
 8000df0:	e00a      	b.n	8000e08 <set_speed+0x50>
	}
	else{
		HAL_GPIO_WritePin(stepper->GPIOx, stepper->dir_pin, GPIO_PIN_RESET);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	6858      	ldr	r0, [r3, #4]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	891b      	ldrh	r3, [r3, #8]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f001 f99f 	bl	8002140 <HAL_GPIO_WritePin>
		stepper->dir = 0;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2200      	movs	r2, #0
 8000e06:	709a      	strb	r2, [r3, #2]
	}

	double sps = fabs(rpm)*200.0*16.0/60.0;
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	4b47      	ldr	r3, [pc, #284]	@ (8000f38 <set_speed+0x180>)
 8000e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e1e:	f7ff fb97 	bl	8000550 <__aeabi_dmul>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <set_speed+0x184>)
 8000e30:	f7ff fb8e 	bl	8000550 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <set_speed+0x188>)
 8000e42:	f7ff fcaf 	bl	80007a4 <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
//		return;
//	}



	if(fabs(sps)<32){
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b39      	ldr	r3, [pc, #228]	@ (8000f44 <set_speed+0x18c>)
 8000e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e64:	f7ff fde6 	bl	8000a34 <__aeabi_dcmplt>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d015      	beq.n	8000e9a <set_speed+0xe2>
		//stepper->timer->Instance->CNT = 0;
		stepper->timer->Instance->ARR = 0;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
		stepper->timer->Instance->CCR1 = 0;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_TIM_Base_Stop_IT(stepper->timer);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 febe 	bl	8002c08 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(stepper->timer, TIM_CHANNEL_1);
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fff0 	bl	8002e78 <HAL_TIM_PWM_Stop>
		return;
 8000e98:	e043      	b.n	8000f22 <set_speed+0x16a>
	}
	//stepper->timer->Instance->CNT = 0;
	stepper->timer->Instance->ARR = (uint16_t)(2000000.0/fabs(sps));
 8000e9a:	6a3c      	ldr	r4, [r7, #32]
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	a120      	add	r1, pc, #128	@ (adr r1, 8000f28 <set_speed+0x170>)
 8000ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eac:	f7ff fc7a 	bl	80007a4 <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fde4 	bl	8000a84 <__aeabi_d2uiz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
	stepper->timer->Instance->CCR1 = stepper->timer->Instance->ARR*0.1;\
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fac3 	bl	800045c <__aeabi_ui2d>
 8000ed6:	a316      	add	r3, pc, #88	@ (adr r3, 8000f30 <set_speed+0x178>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fb38 	bl	8000550 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	f7ff fdc9 	bl	8000a84 <__aeabi_d2uiz>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6363      	str	r3, [r4, #52]	@ 0x34
	if(!stepper->timer->Instance->CR1&TIM_CR1_CEN){
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <set_speed+0x14e>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <set_speed+0x150>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00a      	beq.n	8000f22 <set_speed+0x16a>
		HAL_TIM_Base_Start_IT(stepper->timer);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fe17 	bl	8002b44 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(stepper->timer, TIM_CHANNEL_1);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fefb 	bl	8002d18 <HAL_TIM_PWM_Start>
	}


}
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bdb0      	pop	{r4, r5, r7, pc}
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	413e8480 	.word	0x413e8480
 8000f30:	9999999a 	.word	0x9999999a
 8000f34:	3fb99999 	.word	0x3fb99999
 8000f38:	40690000 	.word	0x40690000
 8000f3c:	40300000 	.word	0x40300000
 8000f40:	404e0000 	.word	0x404e0000
 8000f44:	40400000 	.word	0x40400000

08000f48 <init_stepper>:

void init_stepper(GPIO_TypeDef * GPIOx, uint16_t dir_pin, TIM_HandleTypeDef *timer, Stepper *stepper){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	460b      	mov	r3, r1
 8000f56:	817b      	strh	r3, [r7, #10]
	stepper->GPIOx = GPIOx;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	605a      	str	r2, [r3, #4]
	stepper->dir_pin = dir_pin;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	897a      	ldrh	r2, [r7, #10]
 8000f62:	811a      	strh	r2, [r3, #8]
	stepper->timer = timer;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	60da      	str	r2, [r3, #12]
	stepper->step = 0;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
	stepper->dir = 0;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	709a      	strb	r2, [r3, #2]
	HAL_TIM_Base_Start_IT(stepper->timer);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fde2 	bl	8002b44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(stepper->timer, TIM_CHANNEL_1);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fec6 	bl	8002d18 <HAL_TIM_PWM_Start>
	Motors[motor_cnt] = stepper;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <init_stepper+0x68>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <init_stepper+0x6c>)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	motor_cnt++;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <init_stepper+0x68>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <init_stepper+0x68>)
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001bc 	.word	0x200001bc
 8000fb4:	2000002c 	.word	0x2000002c

08000fb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	for(int i=0;i<motor_cnt;i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e040      	b.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x90>
		if(htim->Instance == Motors[i]->timer->Instance){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4926      	ldr	r1, [pc, #152]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d133      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x8a>
			if(Motors[i]->dir){
 8000fda:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d016      	beq.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x5e>
				Motors[i]->step++;
 8000fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	3201      	adds	r2, #1
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	801a      	strh	r2, [r3, #0]
				if(Motors[i]->step == 16*200){
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8001006:	d11c      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x8a>
					Motors[i]->step = 0;
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	2200      	movs	r2, #0
 8001012:	801a      	strh	r2, [r3, #0]
 8001014:	e015      	b.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x8a>
				}
			}
			else{
				if(Motors[i]->step == 0){
 8001016:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x7a>
					Motors[i]->step = 16*200;
 8001024:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001030:	801a      	strh	r2, [r3, #0]
				}
				Motors[i]->step--;
 8001032:	4a0c      	ldr	r2, [pc, #48]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	3a01      	subs	r2, #1
 800103e:	b292      	uxth	r2, r2
 8001040:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<motor_cnt;i++){
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4293      	cmp	r3, r2
 8001052:	dbb8      	blt.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0xe>
			}
		}
	}


}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000002c 	.word	0x2000002c
 8001068:	200001bc 	.word	0x200001bc

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fccc 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f830 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f9fe 	bl	8001478 <MX_GPIO_Init>
  MX_TIM3_Init();
 800107c:	f000 f898 	bl	80011b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001080:	f000 f90c 	bl	800129c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001084:	f000 f9ce 	bl	8001424 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001088:	f000 f97e 	bl	8001388 <MX_TIM5_Init>





	init_stepper(GPIOA,GPIO_PIN_8,&htim3,&yaw);
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <main+0x4c>)
 800108e:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <main+0x50>)
 8001090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001094:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <main+0x54>)
 8001096:	f7ff ff57 	bl	8000f48 <init_stepper>

	init_stepper(GPIOB,GPIO_PIN_8,&htim4,&pitch);
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <main+0x58>)
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <main+0x5c>)
 800109e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a2:	480a      	ldr	r0, [pc, #40]	@ (80010cc <main+0x60>)
 80010a4:	f7ff ff50 	bl	8000f48 <init_stepper>
	HAL_UART_Receive_IT(&huart1, rx_buffer, 24);
 80010a8:	2218      	movs	r2, #24
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <main+0x64>)
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <main+0x68>)
 80010ae:	f002 fe1e 	bl	8003cee <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b2:	bf00      	nop
 80010b4:	e7fd      	b.n	80010b2 <main+0x46>
 80010b6:	bf00      	nop
 80010b8:	20000310 	.word	0x20000310
 80010bc:	200001c0 	.word	0x200001c0
 80010c0:	40020000 	.word	0x40020000
 80010c4:	20000320 	.word	0x20000320
 80010c8:	20000208 	.word	0x20000208
 80010cc:	40020400 	.word	0x40020400
 80010d0:	200002e0 	.word	0x200002e0
 80010d4:	20000298 	.word	0x20000298

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fd7c 	bl	8004be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	@ (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001124:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <SystemClock_Config+0xd4>)
 8001126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <SystemClock_Config+0xd4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800114c:	2310      	movs	r3, #16
 800114e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001150:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001156:	2304      	movs	r3, #4
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800115a:	2307      	movs	r3, #7
 800115c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f806 	bl	8002174 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800116e:	f000 fa87 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fa68 	bl	8002664 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800119a:	f000 fa71 	bl	8001680 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	@ 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	@ 0x38
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <MX_TIM3_Init+0xe4>)
 80011e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001298 <MX_TIM3_Init+0xe8>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <MX_TIM3_Init+0xe4>)
 80011e8:	2229      	movs	r2, #41	@ 0x29
 80011ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <MX_TIM3_Init+0xe4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <MX_TIM3_Init+0xe4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <MX_TIM3_Init+0xe4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001204:	4823      	ldr	r0, [pc, #140]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001206:	f001 fc4d 	bl	8002aa4 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001210:	f000 fa36 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001222:	f002 f83f 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800122c:	f000 fa28 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001230:	4818      	ldr	r0, [pc, #96]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001232:	f001 fd18 	bl	8002c66 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800123c:	f000 fa20 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4619      	mov	r1, r3
 800124e:	4811      	ldr	r0, [pc, #68]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001250:	f002 fbf0 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800125a:	f000 fa11 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001276:	f001 ff53 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001280:	f000 f9fe 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <MX_TIM3_Init+0xe4>)
 8001286:	f000 fa85 	bl	8001794 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	@ 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001c0 	.word	0x200001c0
 8001298:	40000400 	.word	0x40000400

0800129c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	@ 0x38
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001384 <MX_TIM4_Init+0xe8>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012d4:	2229      	movs	r2, #41	@ 0x29
 80012d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80012de:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f0:	4823      	ldr	r0, [pc, #140]	@ (8001380 <MX_TIM4_Init+0xe4>)
 80012f2:	f001 fbd7 	bl	8002aa4 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80012fc:	f000 f9c0 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	4619      	mov	r1, r3
 800130c:	481c      	ldr	r0, [pc, #112]	@ (8001380 <MX_TIM4_Init+0xe4>)
 800130e:	f001 ffc9 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001318:	f000 f9b2 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800131c:	4818      	ldr	r0, [pc, #96]	@ (8001380 <MX_TIM4_Init+0xe4>)
 800131e:	f001 fca2 	bl	8002c66 <HAL_TIM_PWM_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 f9aa 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <MX_TIM4_Init+0xe4>)
 800133c:	f002 fb7a 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001346:	f000 f99b 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2360      	movs	r3, #96	@ 0x60
 800134c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	@ (8001380 <MX_TIM4_Init+0xe4>)
 8001362:	f001 fedd 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800136c:	f000 f988 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <MX_TIM4_Init+0xe4>)
 8001372:	f000 fa0f 	bl	8001794 <HAL_TIM_MspPostInit>

}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000208 	.word	0x20000208
 8001384:	40000800 	.word	0x40000800

08001388 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_TIM5_Init+0x94>)
 80013a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <MX_TIM5_Init+0x98>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_TIM5_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_TIM5_Init+0x94>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_TIM5_Init+0x94>)
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_TIM5_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_TIM5_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ca:	4814      	ldr	r0, [pc, #80]	@ (800141c <MX_TIM5_Init+0x94>)
 80013cc:	f001 fb6a 	bl	8002aa4 <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 f953 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_TIM5_Init+0x94>)
 80013e8:	f001 ff5c 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f000 f945 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_TIM5_Init+0x94>)
 8001404:	f002 fb16 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800140e:	f000 f937 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000250 	.word	0x20000250
 8001420:	40000c00 	.word	0x40000c00

08001424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <MX_USART1_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_USART1_UART_Init+0x4c>)
 800145c:	f002 fb6c 	bl	8003b38 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f000 f90b 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000298 	.word	0x20000298
 8001474:	40011000 	.word	0x40011000

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b48      	ldr	r3, [pc, #288]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a47      	ldr	r2, [pc, #284]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b45      	ldr	r3, [pc, #276]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a40      	ldr	r2, [pc, #256]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a39      	ldr	r2, [pc, #228]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b37      	ldr	r3, [pc, #220]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a32      	ldr	r2, [pc, #200]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <MX_GPIO_Init+0x13c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001504:	482c      	ldr	r0, [pc, #176]	@ (80015b8 <MX_GPIO_Init+0x140>)
 8001506:	f000 fe1b 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001510:	482a      	ldr	r0, [pc, #168]	@ (80015bc <MX_GPIO_Init+0x144>)
 8001512:	f000 fe15 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800151c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4824      	ldr	r0, [pc, #144]	@ (80015c0 <MX_GPIO_Init+0x148>)
 800152e:	f000 fc83 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001532:	230c      	movs	r3, #12
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001542:	2307      	movs	r3, #7
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	481a      	ldr	r0, [pc, #104]	@ (80015b8 <MX_GPIO_Init+0x140>)
 800154e:	f000 fc73 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001552:	2320      	movs	r3, #32
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4813      	ldr	r0, [pc, #76]	@ (80015b8 <MX_GPIO_Init+0x140>)
 800156a:	f000 fc65 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800156e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <MX_GPIO_Init+0x140>)
 8001588:	f000 fc56 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_GPIO_Init+0x144>)
 80015a6:	f000 fc47 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020800 	.word	0x40020800

080015c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Check if it's the correct UART
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <HAL_UART_RxCpltCallback+0x94>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d13b      	bne.n	800164e <HAL_UART_RxCpltCallback+0x8a>
    {
        // Process the received data in rx_data
    	code = *((int32_t*)&rx_buffer[0]);     // First 4 byte
 80015d6:	4b21      	ldr	r3, [pc, #132]	@ (800165c <HAL_UART_RxCpltCallback+0x98>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a21      	ldr	r2, [pc, #132]	@ (8001660 <HAL_UART_RxCpltCallback+0x9c>)
 80015dc:	6013      	str	r3, [r2, #0]
    	speed_yaw = *((double*)&rx_buffer[8]);    // Next 8 bytes (double)
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <HAL_UART_RxCpltCallback+0xa0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	4920      	ldr	r1, [pc, #128]	@ (8001668 <HAL_UART_RxCpltCallback+0xa4>)
 80015e6:	e9c1 2300 	strd	r2, r3, [r1]
    	speed_pitch = *((double*)&rx_buffer[16]);  // Last 8 bytes (double)
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_UART_RxCpltCallback+0xa8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	491f      	ldr	r1, [pc, #124]	@ (8001670 <HAL_UART_RxCpltCallback+0xac>)
 80015f2:	e9c1 2300 	strd	r2, r3, [r1]
    	if(code == 8848){
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_UART_RxCpltCallback+0x9c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f242 2290 	movw	r2, #8848	@ 0x2290
 80015fe:	4293      	cmp	r3, r2
 8001600:	d113      	bne.n	800162a <HAL_UART_RxCpltCallback+0x66>
    		set_speed(speed_yaw, &yaw);
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_UART_RxCpltCallback+0xa4>)
 8001604:	ed93 7b00 	vldr	d7, [r3]
 8001608:	481a      	ldr	r0, [pc, #104]	@ (8001674 <HAL_UART_RxCpltCallback+0xb0>)
 800160a:	eeb0 0a47 	vmov.f32	s0, s14
 800160e:	eef0 0a67 	vmov.f32	s1, s15
 8001612:	f7ff fbd1 	bl	8000db8 <set_speed>
    		set_speed(speed_pitch, &pitch);
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_UART_RxCpltCallback+0xac>)
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	4816      	ldr	r0, [pc, #88]	@ (8001678 <HAL_UART_RxCpltCallback+0xb4>)
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	f7ff fbc7 	bl	8000db8 <set_speed>
    	}
    	if(code == 8964){
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_UART_RxCpltCallback+0x9c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f242 3204 	movw	r2, #8964	@ 0x2304
 8001632:	4293      	cmp	r3, r2
 8001634:	d106      	bne.n	8001644 <HAL_UART_RxCpltCallback+0x80>
    		HAL_UART_Transmit(&huart1,(uint8_t*)&(yaw.step),sizeof(yaw.step),HAL_MAX_DELAY);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2202      	movs	r2, #2
 800163c:	490d      	ldr	r1, [pc, #52]	@ (8001674 <HAL_UART_RxCpltCallback+0xb0>)
 800163e:	480f      	ldr	r0, [pc, #60]	@ (800167c <HAL_UART_RxCpltCallback+0xb8>)
 8001640:	f002 faca 	bl	8003bd8 <HAL_UART_Transmit>
    	}
//         Optionally, restart reception for continuous data reception
        HAL_UART_Receive_IT(&huart1, rx_buffer, 24);
 8001644:	2218      	movs	r2, #24
 8001646:	4905      	ldr	r1, [pc, #20]	@ (800165c <HAL_UART_RxCpltCallback+0x98>)
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <HAL_UART_RxCpltCallback+0xb8>)
 800164a:	f002 fb50 	bl	8003cee <HAL_UART_Receive_IT>
    }
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40011000 	.word	0x40011000
 800165c:	200002e0 	.word	0x200002e0
 8001660:	200002f8 	.word	0x200002f8
 8001664:	200002e8 	.word	0x200002e8
 8001668:	20000300 	.word	0x20000300
 800166c:	200002f0 	.word	0x200002f0
 8001670:	20000308 	.word	0x20000308
 8001674:	20000310 	.word	0x20000310
 8001678:	20000320 	.word	0x20000320
 800167c:	20000298 	.word	0x20000298

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <Error_Handler+0x8>

0800168c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <HAL_MspInit+0x4c>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <HAL_MspInit+0x4c>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ca:	2007      	movs	r0, #7
 80016cc:	f000 fae0 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <HAL_TIM_Base_MspInit+0xa8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d116      	bne.n	800171c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a24      	ldr	r2, [pc, #144]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	201d      	movs	r0, #29
 8001710:	f000 fac9 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001714:	201d      	movs	r0, #29
 8001716:	f000 fae2 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800171a:	e02e      	b.n	800177a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1a      	ldr	r2, [pc, #104]	@ (800178c <HAL_TIM_Base_MspInit+0xb0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d116      	bne.n	8001754 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201e      	movs	r0, #30
 8001748:	f000 faad 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800174c:	201e      	movs	r0, #30
 800174e:	f000 fac6 	bl	8001cde <HAL_NVIC_EnableIRQ>
}
 8001752:	e012      	b.n	800177a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_TIM_Base_MspInit+0xb4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10d      	bne.n	800177a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_TIM_Base_MspInit+0xac>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400
 8001788:	40023800 	.word	0x40023800
 800178c:	40000800 	.word	0x40000800
 8001790:	40000c00 	.word	0x40000c00

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <HAL_TIM_MspPostInit+0xb0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11e      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a22      	ldr	r2, [pc, #136]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e2:	2302      	movs	r3, #2
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4817      	ldr	r0, [pc, #92]	@ (800184c <HAL_TIM_MspPostInit+0xb8>)
 80017ee:	f000 fb23 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017f2:	e022      	b.n	800183a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <HAL_TIM_MspPostInit+0xbc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11d      	bne.n	800183a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_TIM_MspPostInit+0xb4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181a:	2340      	movs	r3, #64	@ 0x40
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800182a:	2302      	movs	r3, #2
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <HAL_TIM_MspPostInit+0xc0>)
 8001836:	f000 faff 	bl	8001e38 <HAL_GPIO_Init>
}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000400 	.word	0x40000400
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000
 8001850:	40000800 	.word	0x40000800
 8001854:	40020400 	.word	0x40020400

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_UART_MspInit+0x94>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d134      	bne.n	80018e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_UART_MspInit+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c4:	2307      	movs	r3, #7
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <HAL_UART_MspInit+0x9c>)
 80018d0:	f000 fab2 	bl	8001e38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2025      	movs	r0, #37	@ 0x25
 80018da:	f000 f9e4 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018de:	2025      	movs	r0, #37	@ 0x25
 80018e0:	f000 f9fd 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <NMI_Handler+0x4>

08001900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <MemManage_Handler+0x4>

08001910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <UsageFault_Handler+0x4>

08001920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f8af 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TIM3_IRQHandler+0x10>)
 800195e:	f001 faef 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001c0 	.word	0x200001c0

0800196c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM4_IRQHandler+0x10>)
 8001972:	f001 fae5 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000208 	.word	0x20000208

08001980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <USART1_IRQHandler+0x10>)
 8001986:	f002 f9d7 	bl	8003d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000298 	.word	0x20000298

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
         ldr   sp, =_estack    		 /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019bc:	f7ff ffea 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f003 f905 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff fb3f 	bl	800106c <main>
  bx  lr    
 80019ee:	4770      	bx	lr
         ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019fc:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8001a00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a04:	20000334 	.word	0x20000334

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f92b 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fe24 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f943 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f90b 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	@ (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000330 	.word	0x20000330

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000330 	.word	0x20000330

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	@ (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff29 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff3e 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff31 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feda 	bl	8001ad8 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e052      	b.n	8001dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0216 	bic.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_DMA_Abort+0x62>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0208 	bic.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e013      	b.n	8001dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fe9f 	bl	8001ad8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d90c      	bls.n	8001dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e015      	b.n	8001dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e4      	bne.n	8001d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	223f      	movs	r2, #63	@ 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e159      	b.n	8002108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8148 	bne.w	8002102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a2 	beq.w	8002102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a56      	ldr	r2, [pc, #344]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x202>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a48      	ldr	r2, [pc, #288]	@ (800212c <HAL_GPIO_Init+0x2f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x1fe>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_GPIO_Init+0x2f8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x1fa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a46      	ldr	r2, [pc, #280]	@ (8002134 <HAL_GPIO_Init+0x2fc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x1f6>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a45      	ldr	r2, [pc, #276]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x1f2>
 8002026:	2304      	movs	r3, #4
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202a:	2307      	movs	r3, #7
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x204>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_GPIO_Init+0x304>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f aea2 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e267      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d075      	beq.n	800227e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002192:	4b88      	ldr	r3, [pc, #544]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d00c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	4b85      	ldr	r3, [pc, #532]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b82      	ldr	r3, [pc, #520]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b6:	d10b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	4b7e      	ldr	r3, [pc, #504]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d05b      	beq.n	800227c <HAL_RCC_OscConfig+0x108>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d157      	bne.n	800227c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e242      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x74>
 80021da:	4b76      	ldr	r3, [pc, #472]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a75      	ldr	r2, [pc, #468]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x98>
 80021f2:	4b70      	ldr	r3, [pc, #448]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6f      	ldr	r2, [pc, #444]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b6d      	ldr	r3, [pc, #436]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6c      	ldr	r2, [pc, #432]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 800220c:	4b69      	ldr	r3, [pc, #420]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a68      	ldr	r2, [pc, #416]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a65      	ldr	r2, [pc, #404]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fc54 	bl	8001ad8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fc50 	bl	8001ad8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e207      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b5b      	ldr	r3, [pc, #364]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xc0>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fc40 	bl	8001ad8 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff fc3c 	bl	8001ad8 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1f3      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b51      	ldr	r3, [pc, #324]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0xe8>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800228a:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11c      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b44      	ldr	r3, [pc, #272]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d116      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	4b41      	ldr	r3, [pc, #260]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1c7      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4937      	ldr	r1, [pc, #220]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e4:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_OscConfig+0x244>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff fbf5 	bl	8001ad8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f2:	f7ff fbf1 	bl	8001ad8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1a8      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b28      	ldr	r3, [pc, #160]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4925      	ldr	r1, [pc, #148]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_RCC_OscConfig+0x244>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fbd4 	bl	8001ad8 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fbd0 	bl	8001ad8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e187      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d036      	beq.n	80023cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_RCC_OscConfig+0x248>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff fbb4 	bl	8001ad8 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fbb0 	bl	8001ad8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e167      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x200>
 8002392:	e01b      	b.n	80023cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002394:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_RCC_OscConfig+0x248>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7ff fb9d 	bl	8001ad8 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	e00e      	b.n	80023c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7ff fb99 	bl	8001ad8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d907      	bls.n	80023c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e150      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470000 	.word	0x42470000
 80023bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b88      	ldr	r3, [pc, #544]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ea      	bne.n	80023a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8097 	beq.w	8002508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b81      	ldr	r3, [pc, #516]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b7d      	ldr	r3, [pc, #500]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a7c      	ldr	r2, [pc, #496]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b7a      	ldr	r3, [pc, #488]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b77      	ldr	r3, [pc, #476]	@ (80025e8 <HAL_RCC_OscConfig+0x474>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b74      	ldr	r3, [pc, #464]	@ (80025e8 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a73      	ldr	r2, [pc, #460]	@ (80025e8 <HAL_RCC_OscConfig+0x474>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7ff fb59 	bl	8001ad8 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7ff fb55 	bl	8001ad8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e10c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_RCC_OscConfig+0x474>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x2ea>
 8002450:	4b64      	ldr	r3, [pc, #400]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	4a63      	ldr	r2, [pc, #396]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	@ 0x70
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x30c>
 8002466:	4b5f      	ldr	r3, [pc, #380]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246a:	4a5e      	ldr	r2, [pc, #376]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	@ 0x70
 8002472:	4b5c      	ldr	r3, [pc, #368]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	@ 0x70
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 8002480:	4b58      	ldr	r3, [pc, #352]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002484:	4a57      	ldr	r2, [pc, #348]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	@ 0x70
 800248c:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002490:	4a54      	ldr	r2, [pc, #336]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff fb1a 	bl	8001ad8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7ff fb16 	bl	8001ad8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0cb      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	4b49      	ldr	r3, [pc, #292]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ee      	beq.n	80024a8 <HAL_RCC_OscConfig+0x334>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7ff fb04 	bl	8001ad8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7ff fb00 	bl	8001ad8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0b5      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	4b3e      	ldr	r3, [pc, #248]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ee      	bne.n	80024d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	4a38      	ldr	r2, [pc, #224]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a1 	beq.w	8002654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002512:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d05c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d141      	bne.n	80025aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <HAL_RCC_OscConfig+0x478>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff fad4 	bl	8001ad8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff fad0 	bl	8001ad8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e087      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b27      	ldr	r3, [pc, #156]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	491b      	ldr	r1, [pc, #108]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x478>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff faa9 	bl	8001ad8 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff faa5 	bl	8001ad8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e05c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x416>
 80025a8:	e054      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <HAL_RCC_OscConfig+0x478>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fa92 	bl	8001ad8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff fa8e 	bl	8001ad8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e045      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_RCC_OscConfig+0x470>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x444>
 80025d6:	e03d      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e038      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x4ec>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d121      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0cc      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b68      	ldr	r3, [pc, #416]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d90c      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a58      	ldr	r2, [pc, #352]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d044      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d119      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e067      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4934      	ldr	r1, [pc, #208]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7ff f9c0 	bl	8001ad8 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7ff f9bc 	bl	8001ad8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d20c      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f920 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00
 8002820:	40023800 	.word	0x40023800
 8002824:	08004c54 	.word	0x08004c54
 8002828:	20000000 	.word	0x20000000
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b094      	sub	sp, #80	@ 0x50
 8002836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002848:	4b79      	ldr	r3, [pc, #484]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d00d      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 8002854:	2b08      	cmp	r3, #8
 8002856:	f200 80e1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x34>
 800285e:	2b04      	cmp	r3, #4
 8002860:	d003      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x3a>
 8002862:	e0db      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002868:	e0db      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286a:	4b73      	ldr	r3, [pc, #460]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800286e:	e0d8      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002870:	4b6f      	ldr	r3, [pc, #444]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002878:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
 800289a:	2300      	movs	r3, #0
 800289c:	637b      	str	r3, [r7, #52]	@ 0x34
 800289e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	0159      	lsls	r1, r3, #5
 80028b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b4:	0150      	lsls	r0, r2, #5
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4621      	mov	r1, r4
 80028bc:	1a51      	subs	r1, r2, r1
 80028be:	6139      	str	r1, [r7, #16]
 80028c0:	4629      	mov	r1, r5
 80028c2:	eb63 0301 	sbc.w	r3, r3, r1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d4:	4659      	mov	r1, fp
 80028d6:	018b      	lsls	r3, r1, #6
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028de:	4651      	mov	r1, sl
 80028e0:	018a      	lsls	r2, r1, #6
 80028e2:	4651      	mov	r1, sl
 80028e4:	ebb2 0801 	subs.w	r8, r2, r1
 80028e8:	4659      	mov	r1, fp
 80028ea:	eb63 0901 	sbc.w	r9, r3, r1
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002902:	4690      	mov	r8, r2
 8002904:	4699      	mov	r9, r3
 8002906:	4623      	mov	r3, r4
 8002908:	eb18 0303 	adds.w	r3, r8, r3
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	462b      	mov	r3, r5
 8002910:	eb49 0303 	adc.w	r3, r9, r3
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002922:	4629      	mov	r1, r5
 8002924:	024b      	lsls	r3, r1, #9
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800292c:	4621      	mov	r1, r4
 800292e:	024a      	lsls	r2, r1, #9
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002936:	2200      	movs	r2, #0
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800293c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002940:	f7fe f8c0 	bl	8000ac4 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800294c:	e058      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	2200      	movs	r2, #0
 8002956:	4618      	mov	r0, r3
 8002958:	4611      	mov	r1, r2
 800295a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
 8002964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	f04f 0000 	mov.w	r0, #0
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	0159      	lsls	r1, r3, #5
 8002976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297a:	0150      	lsls	r0, r2, #5
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4641      	mov	r1, r8
 8002982:	ebb2 0a01 	subs.w	sl, r2, r1
 8002986:	4649      	mov	r1, r9
 8002988:	eb63 0b01 	sbc.w	fp, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800299c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a0:	ebb2 040a 	subs.w	r4, r2, sl
 80029a4:	eb63 050b 	sbc.w	r5, r3, fp
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	00eb      	lsls	r3, r5, #3
 80029b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b6:	00e2      	lsls	r2, r4, #3
 80029b8:	4614      	mov	r4, r2
 80029ba:	461d      	mov	r5, r3
 80029bc:	4643      	mov	r3, r8
 80029be:	18e3      	adds	r3, r4, r3
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	464b      	mov	r3, r9
 80029c4:	eb45 0303 	adc.w	r3, r5, r3
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d6:	4629      	mov	r1, r5
 80029d8:	028b      	lsls	r3, r1, #10
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e0:	4621      	mov	r1, r4
 80029e2:	028a      	lsls	r2, r1, #10
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ea:	2200      	movs	r2, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	61fa      	str	r2, [r7, #28]
 80029f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f4:	f7fe f866 	bl	8000ac4 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3750      	adds	r7, #80	@ 0x50
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0a9b      	lsrs	r3, r3, #10
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	08004c64 	.word	0x08004c64

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffdc 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0b5b      	lsrs	r3, r3, #13
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08004c64 	.word	0x08004c64

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e041      	b.n	8002b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fe06 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fcce 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d001      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e044      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <HAL_TIM_Base_Start_IT+0xb8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000

08002c08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <HAL_TIM_Base_Stop_IT+0x48>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_Base_Stop_IT+0x48>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e041      	b.n	8002cfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f839 	bl	8002d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f000 fbed 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start+0x24>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e022      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d109      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x3e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e015      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start+0x58>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e008      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e068      	b.n	8002e5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x82>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d98:	e013      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0x92>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002da8:	e00b      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0xa2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002db8:	e003      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fe0c 	bl	80039e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <HAL_TIM_PWM_Start+0x14c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_TIM_PWM_Start+0x14c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d013      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_TIM_PWM_Start+0x150>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_TIM_PWM_Start+0x154>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	@ (8002e70 <HAL_TIM_PWM_Start+0x158>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <HAL_TIM_PWM_Start+0x15c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d010      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40014000 	.word	0x40014000

08002e78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fdac 	bl	80039e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a29      	ldr	r2, [pc, #164]	@ (8002f3c <HAL_TIM_PWM_Stop+0xc4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d117      	bne.n	8002eca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <HAL_TIM_PWM_Stop+0x52>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1a      	ldr	r2, [r3, #32]
 8002eb0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_PWM_Stop+0x52>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_TIM_PWM_Stop+0x82>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_TIM_PWM_Stop+0x82>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Stop+0x92>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f08:	e013      	b.n	8002f32 <HAL_TIM_PWM_Stop+0xba>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0xa2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f18:	e00b      	b.n	8002f32 <HAL_TIM_PWM_Stop+0xba>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0xb2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f28:	e003      	b.n	8002f32 <HAL_TIM_PWM_Stop+0xba>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40010000 	.word	0x40010000

08002f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d020      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01b      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0202 	mvn.w	r2, #2
 8002f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa5b 	bl	8003446 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa4d 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa5e 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d020      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0204 	mvn.w	r2, #4
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa35 	bl	8003446 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa27 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fa38 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d020      	beq.n	800303c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa0f 	bl	8003446 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa01 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa12 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d020      	beq.n	8003088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0210 	mvn.w	r2, #16
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2208      	movs	r2, #8
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9e9 	bl	8003446 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9db 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9ec 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0201 	mvn.w	r2, #1
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd ff86 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fd2a 	bl	8003b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9bd 	bl	800346e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0220 	mvn.w	r2, #32
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fcfc 	bl	8003b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0ae      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	f200 809f 	bhi.w	800328c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003189 	.word	0x08003189
 8003158:	0800328d 	.word	0x0800328d
 800315c:	0800328d 	.word	0x0800328d
 8003160:	0800328d 	.word	0x0800328d
 8003164:	080031c9 	.word	0x080031c9
 8003168:	0800328d 	.word	0x0800328d
 800316c:	0800328d 	.word	0x0800328d
 8003170:	0800328d 	.word	0x0800328d
 8003174:	0800320b 	.word	0x0800320b
 8003178:	0800328d 	.word	0x0800328d
 800317c:	0800328d 	.word	0x0800328d
 8003180:	0800328d 	.word	0x0800328d
 8003184:	0800324b 	.word	0x0800324b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa04 	bl	800359c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0208 	orr.w	r2, r2, #8
 80031a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0204 	bic.w	r2, r2, #4
 80031b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6999      	ldr	r1, [r3, #24]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	619a      	str	r2, [r3, #24]
      break;
 80031c6:	e064      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa4a 	bl	8003668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	021a      	lsls	r2, r3, #8
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	619a      	str	r2, [r3, #24]
      break;
 8003208:	e043      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fa95 	bl	8003740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0208 	orr.w	r2, r2, #8
 8003224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0204 	bic.w	r2, r2, #4
 8003234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69d9      	ldr	r1, [r3, #28]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	61da      	str	r2, [r3, #28]
      break;
 8003248:	e023      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fadf 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69d9      	ldr	r1, [r3, #28]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	021a      	lsls	r2, r3, #8
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	61da      	str	r2, [r3, #28]
      break;
 800328a:	e002      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
      break;
 8003290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIM_ConfigClockSource+0x1c>
 80032bc:	2302      	movs	r3, #2
 80032be:	e0b4      	b.n	800342a <HAL_TIM_ConfigClockSource+0x186>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f8:	d03e      	beq.n	8003378 <HAL_TIM_ConfigClockSource+0xd4>
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fe:	f200 8087 	bhi.w	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003306:	f000 8086 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x172>
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330e:	d87f      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b70      	cmp	r3, #112	@ 0x70
 8003312:	d01a      	beq.n	800334a <HAL_TIM_ConfigClockSource+0xa6>
 8003314:	2b70      	cmp	r3, #112	@ 0x70
 8003316:	d87b      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b60      	cmp	r3, #96	@ 0x60
 800331a:	d050      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x11a>
 800331c:	2b60      	cmp	r3, #96	@ 0x60
 800331e:	d877      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b50      	cmp	r3, #80	@ 0x50
 8003322:	d03c      	beq.n	800339e <HAL_TIM_ConfigClockSource+0xfa>
 8003324:	2b50      	cmp	r3, #80	@ 0x50
 8003326:	d873      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d058      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x13a>
 800332c:	2b40      	cmp	r3, #64	@ 0x40
 800332e:	d86f      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b30      	cmp	r3, #48	@ 0x30
 8003332:	d064      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x15a>
 8003334:	2b30      	cmp	r3, #48	@ 0x30
 8003336:	d86b      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d060      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x15a>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d867      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	2b10      	cmp	r3, #16
 8003346:	d05a      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x15a>
 8003348:	e062      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	f000 fb25 	bl	80039a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800336c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	609a      	str	r2, [r3, #8]
      break;
 8003376:	e04f      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	f000 fb0e 	bl	80039a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800339a:	609a      	str	r2, [r3, #8]
      break;
 800339c:	e03c      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 fa82 	bl	80038b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2150      	movs	r1, #80	@ 0x50
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fadb 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033bc:	e02c      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 faa1 	bl	8003912 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2160      	movs	r1, #96	@ 0x60
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 facb 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033dc:	e01c      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 fa62 	bl	80038b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2140      	movs	r1, #64	@ 0x40
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fabb 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033fc:	e00c      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 fab2 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 800340e:	e003      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	e000      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3a      	ldr	r2, [pc, #232]	@ (8003580 <TIM_Base_SetConfig+0xfc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00f      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a2:	d00b      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a37      	ldr	r2, [pc, #220]	@ (8003584 <TIM_Base_SetConfig+0x100>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a36      	ldr	r2, [pc, #216]	@ (8003588 <TIM_Base_SetConfig+0x104>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a35      	ldr	r2, [pc, #212]	@ (800358c <TIM_Base_SetConfig+0x108>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d108      	bne.n	80034ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <TIM_Base_SetConfig+0xfc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034dc:	d017      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a28      	ldr	r2, [pc, #160]	@ (8003584 <TIM_Base_SetConfig+0x100>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <TIM_Base_SetConfig+0x104>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00f      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a26      	ldr	r2, [pc, #152]	@ (800358c <TIM_Base_SetConfig+0x108>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a25      	ldr	r2, [pc, #148]	@ (8003590 <TIM_Base_SetConfig+0x10c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a24      	ldr	r2, [pc, #144]	@ (8003594 <TIM_Base_SetConfig+0x110>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a23      	ldr	r2, [pc, #140]	@ (8003598 <TIM_Base_SetConfig+0x114>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0e      	ldr	r2, [pc, #56]	@ (8003580 <TIM_Base_SetConfig+0xfc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]
  }
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0201 	bic.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <TIM_OC1_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0308 	bic.w	r3, r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <TIM_OC1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000

08003668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 0210 	bic.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <TIM_OC2_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	@ (800373c <TIM_OC2_SetConfig+0xd4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d113      	bne.n	8003714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000

08003740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <TIM_OC3_SetConfig+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40010000 	.word	0x40010000

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a10      	ldr	r2, [pc, #64]	@ (80038b0 <TIM_OC4_SetConfig+0x9c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d109      	bne.n	8003888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000

080038b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f023 0201 	bic.w	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f023 030a 	bic.w	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 0210 	bic.w	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800394e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	f043 0307 	orr.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e050      	b.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	@ (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	@ (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40014000 	.word	0x40014000

08003b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e042      	b.n	8003bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fe7a 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	@ 0x24
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fdbd 	bl	80046fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	@ 0x28
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d175      	bne.n	8003ce4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Transmit+0x2c>
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e06e      	b.n	8003ce6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2221      	movs	r2, #33	@ 0x21
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c16:	f7fd ff5f 	bl	8001ad8 <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d108      	bne.n	8003c44 <HAL_UART_Transmit+0x6c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e003      	b.n	8003c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c4c:	e02e      	b.n	8003cac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	@ 0x80
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fb1f 	bl	800429c <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e03a      	b.n	8003ce6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e007      	b.n	8003c9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1cb      	bne.n	8003c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	@ 0x40
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 faeb 	bl	800429c <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d112      	bne.n	8003d2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Receive_IT+0x26>
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e00b      	b.n	8003d30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	461a      	mov	r2, r3
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fb12 	bl	800434e <UART_Start_Receive_IT>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	e000      	b.n	8003d30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_UART_IRQHandler+0x66>
 8003d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fbf2 	bl	8004580 <UART_Receive_IT>
      return;
 8003d9c:	e25b      	b.n	8004256 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80de 	beq.w	8003f64 <HAL_UART_IRQHandler+0x22c>
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80d1 	beq.w	8003f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0xae>
 8003dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0201 	orr.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_UART_IRQHandler+0xd2>
 8003df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_UART_IRQHandler+0xf6>
 8003e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <HAL_UART_IRQHandler+0x126>
 8003e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 81f2 	beq.w	800424c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_UART_IRQHandler+0x14e>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb7d 	bl	8004580 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x17a>
 8003eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d04f      	beq.n	8003f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa85 	bl	80043c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d141      	bne.n	8003f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3314      	adds	r3, #20
 8003eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1d9      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004118 <HAL_UART_IRQHandler+0x3e0>)
 8003f20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd ff63 	bl	8001df2 <HAL_DMA_Abort_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	e00e      	b.n	8003f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f994 	bl	8004270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e00a      	b.n	8003f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f990 	bl	8004270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e006      	b.n	8003f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f98c 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f5e:	e175      	b.n	800424c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	bf00      	nop
    return;
 8003f62:	e173      	b.n	800424c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 814f 	bne.w	800420c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8148 	beq.w	800420c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8141 	beq.w	800420c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	f040 80b6 	bne.w	800411c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8145 	beq.w	8004250 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	f080 813e 	bcs.w	8004250 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe6:	f000 8088 	beq.w	80040fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004000:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800402e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1d9      	bne.n	8003fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800405a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800405e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800406c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e1      	bne.n	8004036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004096:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004098:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800409c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e3      	bne.n	8004072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ca:	f023 0310 	bic.w	r3, r3, #16
 80040ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e3      	bne.n	80040b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fd fe0c 	bl	8001d12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004108:	b29b      	uxth	r3, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	b29b      	uxth	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8b7 	bl	8004284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004116:	e09b      	b.n	8004250 <HAL_UART_IRQHandler+0x518>
 8004118:	08004489 	.word	0x08004489
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004124:	b29b      	uxth	r3, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 808e 	beq.w	8004254 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8089 	beq.w	8004254 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004166:	647a      	str	r2, [r7, #68]	@ 0x44
 8004168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800416c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	623b      	str	r3, [r7, #32]
   return(result);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800419e:	633a      	str	r2, [r7, #48]	@ 0x30
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	617b      	str	r3, [r7, #20]
   return(result);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e3      	bne.n	80041c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f83d 	bl	8004284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420a:	e023      	b.n	8004254 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_UART_IRQHandler+0x4f4>
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f943 	bl	80044b0 <UART_Transmit_IT>
    return;
 800422a:	e014      	b.n	8004256 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <HAL_UART_IRQHandler+0x51e>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f983 	bl	8004550 <UART_EndTransmit_IT>
    return;
 800424a:	e004      	b.n	8004256 <HAL_UART_IRQHandler+0x51e>
    return;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <HAL_UART_IRQHandler+0x51e>
      return;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_UART_IRQHandler+0x51e>
      return;
 8004254:	bf00      	nop
  }
}
 8004256:	37e8      	adds	r7, #232	@ 0xe8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ac:	e03b      	b.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d037      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fd fc0f 	bl	8001ad8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <UART_WaitOnFlagUntilTimeout+0x30>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e03a      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d023      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b80      	cmp	r3, #128	@ 0x80
 80042e2:	d020      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d01d      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d116      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f857 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2208      	movs	r2, #8
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e00f      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	429a      	cmp	r2, r3
 8004342:	d0b4      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2222      	movs	r2, #34	@ 0x22
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004392:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0220 	orr.w	r2, r2, #32
 80043b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b095      	sub	sp, #84	@ 0x54
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	61fb      	str	r3, [r7, #28]
   return(result);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800441e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	2b01      	cmp	r3, #1
 8004438:	d119      	bne.n	800446e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	60bb      	str	r3, [r7, #8]
   return(result);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0310 	bic.w	r3, r3, #16
 8004450:	647b      	str	r3, [r7, #68]	@ 0x44
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800445a:	61ba      	str	r2, [r7, #24]
 800445c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6979      	ldr	r1, [r7, #20]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	613b      	str	r3, [r7, #16]
   return(result);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800447c:	bf00      	nop
 800447e:	3754      	adds	r7, #84	@ 0x54
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff fee4 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b21      	cmp	r3, #33	@ 0x21
 80044c2:	d13e      	bne.n	8004542 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044cc:	d114      	bne.n	80044f8 <UART_Transmit_IT+0x48>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d110      	bne.n	80044f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]
 80044f6:	e008      	b.n	800450a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6211      	str	r1, [r2, #32]
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4619      	mov	r1, r3
 8004518:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800453c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004566:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fe73 	bl	800425c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	@ 0x30
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b22      	cmp	r3, #34	@ 0x22
 8004592:	f040 80ae 	bne.w	80046f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459e:	d117      	bne.n	80045d0 <UART_Receive_IT+0x50>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d113      	bne.n	80045d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ce:	e026      	b.n	800461e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e2:	d007      	beq.n	80045f4 <UART_Receive_IT+0x74>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <UART_Receive_IT+0x82>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e008      	b.n	8004614 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800460e:	b2da      	uxtb	r2, r3
 8004610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004612:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29b      	uxth	r3, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4619      	mov	r1, r3
 800462c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800462e:	2b00      	cmp	r3, #0
 8004630:	d15d      	bne.n	80046ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0220 	bic.w	r2, r2, #32
 8004640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	2b01      	cmp	r3, #1
 8004676:	d135      	bne.n	80046e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469e:	623a      	str	r2, [r7, #32]
 80046a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	69f9      	ldr	r1, [r7, #28]
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e5      	bne.n	800467e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d10a      	bne.n	80046d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fdd1 	bl	8004284 <HAL_UARTEx_RxEventCallback>
 80046e2:	e002      	b.n	80046ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fc ff6d 	bl	80015c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e002      	b.n	80046f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3730      	adds	r7, #48	@ 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b0c0      	sub	sp, #256	@ 0x100
 8004702:	af00      	add	r7, sp, #0
 8004704:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	68d9      	ldr	r1, [r3, #12]
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	ea40 0301 	orr.w	r3, r0, r1
 8004724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	431a      	orrs	r2, r3
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004754:	f021 010c 	bic.w	r1, r1, #12
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004762:	430b      	orrs	r3, r1
 8004764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	6999      	ldr	r1, [r3, #24]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	ea40 0301 	orr.w	r3, r0, r1
 8004782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b8f      	ldr	r3, [pc, #572]	@ (80049c8 <UART_SetConfig+0x2cc>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d005      	beq.n	800479c <UART_SetConfig+0xa0>
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b8d      	ldr	r3, [pc, #564]	@ (80049cc <UART_SetConfig+0x2d0>)
 8004798:	429a      	cmp	r2, r3
 800479a:	d104      	bne.n	80047a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7fe f96e 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 80047a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047a4:	e003      	b.n	80047ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a6:	f7fe f955 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 80047aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b8:	f040 810c 	bne.w	80049d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	1891      	adds	r1, r2, r2
 80047d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047d6:	415b      	adcs	r3, r3
 80047d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047de:	4621      	mov	r1, r4
 80047e0:	eb12 0801 	adds.w	r8, r2, r1
 80047e4:	4629      	mov	r1, r5
 80047e6:	eb43 0901 	adc.w	r9, r3, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	4623      	mov	r3, r4
 8004804:	eb18 0303 	adds.w	r3, r8, r3
 8004808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800480c:	462b      	mov	r3, r5
 800480e:	eb49 0303 	adc.w	r3, r9, r3
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004822:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800482a:	460b      	mov	r3, r1
 800482c:	18db      	adds	r3, r3, r3
 800482e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004830:	4613      	mov	r3, r2
 8004832:	eb42 0303 	adc.w	r3, r2, r3
 8004836:	657b      	str	r3, [r7, #84]	@ 0x54
 8004838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800483c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004840:	f7fc f940 	bl	8000ac4 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4b61      	ldr	r3, [pc, #388]	@ (80049d0 <UART_SetConfig+0x2d4>)
 800484a:	fba3 2302 	umull	r2, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	011c      	lsls	r4, r3, #4
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800485c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	1891      	adds	r1, r2, r2
 800486a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800486c:	415b      	adcs	r3, r3
 800486e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004874:	4641      	mov	r1, r8
 8004876:	eb12 0a01 	adds.w	sl, r2, r1
 800487a:	4649      	mov	r1, r9
 800487c:	eb43 0b01 	adc.w	fp, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800488c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004894:	4692      	mov	sl, r2
 8004896:	469b      	mov	fp, r3
 8004898:	4643      	mov	r3, r8
 800489a:	eb1a 0303 	adds.w	r3, sl, r3
 800489e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048a2:	464b      	mov	r3, r9
 80048a4:	eb4b 0303 	adc.w	r3, fp, r3
 80048a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048c0:	460b      	mov	r3, r1
 80048c2:	18db      	adds	r3, r3, r3
 80048c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c6:	4613      	mov	r3, r2
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048d6:	f7fc f8f5 	bl	8000ac4 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <UART_SetConfig+0x2d4>)
 80048e2:	fba3 2301 	umull	r2, r3, r3, r1
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2264      	movs	r2, #100	@ 0x64
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	1acb      	subs	r3, r1, r3
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048f6:	4b36      	ldr	r3, [pc, #216]	@ (80049d0 <UART_SetConfig+0x2d4>)
 80048f8:	fba3 2302 	umull	r2, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004904:	441c      	add	r4, r3
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004910:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004920:	415b      	adcs	r3, r3
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004928:	4641      	mov	r1, r8
 800492a:	1851      	adds	r1, r2, r1
 800492c:	6339      	str	r1, [r7, #48]	@ 0x30
 800492e:	4649      	mov	r1, r9
 8004930:	414b      	adcs	r3, r1
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004940:	4659      	mov	r1, fp
 8004942:	00cb      	lsls	r3, r1, #3
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494a:	4651      	mov	r1, sl
 800494c:	00ca      	lsls	r2, r1, #3
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4603      	mov	r3, r0
 8004954:	4642      	mov	r2, r8
 8004956:	189b      	adds	r3, r3, r2
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800495c:	464b      	mov	r3, r9
 800495e:	460a      	mov	r2, r1
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004974:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800498e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004992:	f7fc f897 	bl	8000ac4 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <UART_SetConfig+0x2d4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	@ 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	3332      	adds	r3, #50	@ 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	@ (80049d0 <UART_SetConfig+0x2d4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 0207 	and.w	r2, r3, #7
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4422      	add	r2, r4
 80049c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049c4:	e106      	b.n	8004bd4 <UART_SetConfig+0x4d8>
 80049c6:	bf00      	nop
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40011400 	.word	0x40011400
 80049d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	1891      	adds	r1, r2, r2
 80049ec:	6239      	str	r1, [r7, #32]
 80049ee:	415b      	adcs	r3, r3
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049f6:	4641      	mov	r1, r8
 80049f8:	1854      	adds	r4, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb43 0501 	adc.w	r5, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	eb45 0303 	adc.w	r3, r5, r3
 8004a22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a42:	4629      	mov	r1, r5
 8004a44:	008b      	lsls	r3, r1, #2
 8004a46:	4621      	mov	r1, r4
 8004a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	008a      	lsls	r2, r1, #2
 8004a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a54:	f7fc f836 	bl	8000ac4 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b60      	ldr	r3, [pc, #384]	@ (8004be0 <UART_SetConfig+0x4e4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	61b9      	str	r1, [r7, #24]
 8004a80:	415b      	adcs	r3, r3
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	4641      	mov	r1, r8
 8004a8a:	1851      	adds	r1, r2, r1
 8004a8c:	6139      	str	r1, [r7, #16]
 8004a8e:	4649      	mov	r1, r9
 8004a90:	414b      	adcs	r3, r1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	00cb      	lsls	r3, r1, #3
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aaa:	4651      	mov	r1, sl
 8004aac:	00ca      	lsls	r2, r1, #3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ad2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aea:	4641      	mov	r1, r8
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004af2:	f7fb ffe7 	bl	8000ac4 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	4b38      	ldr	r3, [pc, #224]	@ (8004be0 <UART_SetConfig+0x4e4>)
 8004afe:	fba3 2301 	umull	r2, r3, r3, r1
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2264      	movs	r2, #100	@ 0x64
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	1acb      	subs	r3, r1, r3
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	3332      	adds	r3, #50	@ 0x32
 8004b10:	4a33      	ldr	r2, [pc, #204]	@ (8004be0 <UART_SetConfig+0x4e4>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b1c:	441c      	add	r4, r3
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b26:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b6e:	464b      	mov	r3, r9
 8004b70:	460a      	mov	r2, r1
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b82:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b90:	4649      	mov	r1, r9
 8004b92:	008b      	lsls	r3, r1, #2
 8004b94:	4641      	mov	r1, r8
 8004b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	008a      	lsls	r2, r1, #2
 8004b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ba2:	f7fb ff8f 	bl	8000ac4 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <UART_SetConfig+0x4e4>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	@ 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	3332      	adds	r3, #50	@ 0x32
 8004bbe:	4a08      	ldr	r2, [pc, #32]	@ (8004be0 <UART_SetConfig+0x4e4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 020f 	and.w	r2, r3, #15
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4422      	add	r2, r4
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be0:	51eb851f 	.word	0x51eb851f

08004be4 <memset>:
 8004be4:	4402      	add	r2, r0
 8004be6:	4603      	mov	r3, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d100      	bne.n	8004bee <memset+0xa>
 8004bec:	4770      	bx	lr
 8004bee:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf2:	e7f9      	b.n	8004be8 <memset+0x4>

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c2c <__libc_init_array+0x38>)
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c30 <__libc_init_array+0x3c>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	4d0b      	ldr	r5, [pc, #44]	@ (8004c34 <__libc_init_array+0x40>)
 8004c06:	4c0c      	ldr	r4, [pc, #48]	@ (8004c38 <__libc_init_array+0x44>)
 8004c08:	f000 f818 	bl	8004c3c <_init>
 8004c0c:	1b64      	subs	r4, r4, r5
 8004c0e:	10a4      	asrs	r4, r4, #2
 8004c10:	2600      	movs	r6, #0
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004c74 	.word	0x08004c74
 8004c30:	08004c74 	.word	0x08004c74
 8004c34:	08004c74 	.word	0x08004c74
 8004c38:	08004c78 	.word	0x08004c78

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
